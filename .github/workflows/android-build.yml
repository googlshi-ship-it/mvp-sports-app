name: Android APK (Manual)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04
    env:
      ANDROID_SDK_ROOT: $HOME/android-sdk
      ANDROID_HOME: $HOME/android-sdk
      GRADLE_USER_HOME: ${{ github.workspace }}/.gradle

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js (no cache)
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install JS deps (frontend)
        working-directory: frontend
        shell: bash
        run: |
          if [ -f yarn.lock ]; then
            npm i -g yarn@1.22.22
            yarn install --check-files
          elif [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi

      # Java 17 — совместимо с современным AGP и инструментами Android
      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
          cache: gradle

      # УСТАНОВКА ANDROID SDK — через проверенный action
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          sdk-version: "latest"
          cache: true

      # Пакеты SDK (через уже настроенный sdkmanager из PATH)
      - name: Install Android packages
        shell: bash
        run: |
          yes | sdkmanager --licenses
          sdkmanager "platform-tools" \
                     "platforms;android-35" "build-tools;35.0.0" \
                     "platforms;android-36" "build-tools;36.0.0" || true

      # Пропишем путь SDK в проект
      - name: Write local.properties
        working-directory: frontend/android
        run: echo "sdk.dir=$ANDROID_SDK_ROOT" > local.properties

      - name: Make gradlew executable
        run: chmod +x frontend/android/gradlew

      - name: Print tool versions
        working-directory: frontend/android
        run: |
          java -version || true
          node -v || true
          yarn -v || true
          sdkmanager --version || true
          ./gradlew -v || true

      - name: Build APK (capture full log)
        working-directory: frontend/android
        shell: bash
        env:
          ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
          ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
        run: |
          set -o pipefail
          LOG="$GITHUB_WORKSPACE/gradle-build.log"
          if [ -n "${ANDROID_KEYSTORE_BASE64:-}" ] && [ -n "${ANDROID_KEYSTORE_PASSWORD:-}" ] && [ -n "${ANDROID_KEY_ALIAS:-}" ] && [ -n "${ANDROID_KEY_PASSWORD:-}" ]; then
            echo "$ANDROID_KEYSTORE_BASE64" | base64 -d > app/release.keystore
            mkdir -p "$HOME/.gradle"
            {
              echo "MYAPP_UPLOAD_STORE_FILE=app/release.keystore"
              echo "MYAPP_UPLOAD_STORE_PASSWORD=$ANDROID_KEYSTORE_PASSWORD"
              echo "MYAPP_UPLOAD_KEY_ALIAS=$ANDROID_KEY_ALIAS"
              echo "MYAPP_UPLOAD_KEY_PASSWORD=$ANDROID_KEY_PASSWORD"
              echo "org.gradle.jvmargs=-Xmx4g -Dfile.encoding=UTF-8"
              echo "android.useAndroidX=true"
              echo "android.enableJetifier=true"
            } > "$HOME/.gradle/gradle.properties"
            ./gradlew --no-daemon --stacktrace --info assembleRelease 2>&1 | tee "$LOG"
          else
            ./gradlew --no-daemon --stacktrace --info assembleDebug 2>&1 | tee "$LOG"
          fi

      - name: Upload logs
        uses: actions/upload-artifact@v4
        with:
          name: logs
          path: gradle-build.log
          if-no-files-found: error

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: app-apk
          path: |
            frontend/android/app/build/outputs/apk/release/*.apk
            frontend/android/app/build/outputs/apk/debug/*.apk
          if-no-files-found: warn
