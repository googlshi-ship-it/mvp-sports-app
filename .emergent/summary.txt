<analysis>
The trajectory details the evolution of an MVP sports mobile app from its initial AI-driven creation to ongoing development. Initially, the focus was on a FastAPI backend, MongoDB, and Expo frontend, establishing core features like match listings, fan voting, user authentication, and a Rivalry feature. Subsequent work involved significant UI/UX overhauls, including a glassmorphism design, safe area handling, and a refined tab navigation. Recurring challenges included HTML-escaped characters, routing conflicts (Unmatched Route), and consistent status bar appearance on iOS. The AI engineer repeatedly addressed these, often in response to detailed, sometimes monolithic, user instructions or bug reports. The most recent efforts centered on integrating a live football data feed (Football-Data.org) and resolving critical publishing issues to Expo.dev, which ultimately failed due to an  command error.
</analysis>

<product_requirements>
The MVP mobile application is a full-stack Expo/FastAPI/MongoDB solution for sports enthusiasts. Key features include:

1.  **Match Display & Interaction**: View matches grouped by date, access detailed match information, multi-country TV channels, fan voting (like/dislike, MVP, scorer) with a 24-hour window, and push notifications. Voting is now hidden until after the match ends.
2.  **User System**: Registration/login (email/password), JWT authentication, user scoring, and a leaderboard. All voting requires authentication.
3.  **Content Structure**: Support for Competitions (Leagues, Cups) with details, match details (formations, players), and favorite teams. New: Live feed for football matches from Football-Data.org, with preferred competition saving and sorting by league strength.
4.  **Personalization & Admin**: Settings for country, theme (Light/Dark), reminders, Display clubs like national teams, Reduce effects. Admin Debug panel.
5.  **UI/UX**: Modern iOS-inspired glassmorphism, light/dark themes, strict global card layout, defined typography. Profile/Settings moved from bottom tabs to a top-right avatar modal. The app ensures proper iOS/Android safe area handling, dark theme consistency, and a clean, two-tab navigation (Competitions, Matches).
6.  **Deployment**: One-click Render Blueprint for backend/frontend. Publishing to Expo.dev via  or EAS Update.
7.  **New Features**: Rivalry feature (backend model, admin endpoint, UI chip/glow/accessibility label), cross-platform Share action.
</product_requirements>

<key_technical_concepts>
-   Expo (React Native)
-   FastAPI (Python)
-   MongoDB (Database)
-   Expo Router (File-based routing)
-   Zustand (Frontend state management)
-   JWT, bcrypt (Authentication/Security)
-   Render, MongoDB Atlas (Cloud hosting)
-   Glassmorphism (UI design)
-   Football-Data.org (External live data)
-   , , , , 
</key_technical_concepts>

<code_architecture>
The project uses a full-stack architecture with  (Expo) and  (FastAPI) directories.



-   : FastAPI application for API logic (matches, competitions, users, voting).  includes  status, and an admin endpoint exists for management.
-   : Render Blueprint for deployment, defining service, build, and environment configurations.
-   : Documentation detailing the Rivalry feature.
-   : Expo app configuration. Updated with , , , ,  (for iOS status bar control), and  paths/background.
-   : Frontend dependency manifest. Updated dependencies like , , , , , , and . Added , , , , ,  scripts.
-   : Stricter TypeScript configuration for the frontend.
-   : Basic ESLint configuration for code quality checks.
-   : GitHub Action for running frontend CI checks (checkout, setup-node, npm ci, expo install --fix, doctor, typecheck, lint) on pull requests.
-   : Root layout for Expo Router. Handles global  style (light) and hides stack headers to avoid double padding (). Removed  from here to avoid double wrapping.
-   : Layout for the tab-based navigation. Configured for two main tabs (Competitions, Matches). Sets dark header/tab bar styles,  with , and uses  to hide other potentially existing tab routes. Crucially, it no longer has an outer  or a duplicate .
-   : Initial entry point. Redirects to  to prevent Unmatched Route errors.
-   : Global error boundary, displaying a dark screen with a message for runtime errors instead of a red screen.
-   : Match details screen. Implements cross-platform Share functionality, Rivalry UI accents (chip, top glow, accessibility label), and complex voting visibility logic (only shows voting UI after the match ends based on server flag or time-based fallback).
-   : Competition details screen. Share action on long-press.
-   : Displays a list of competitions fetched from Football-Data.org. Items are tappable to save preferred competition ID and navigate to the Matches screen. Uses a simple placeholder UI currently.
-   : Displays today's matches for the saved preferred competition, using data from Football-Data.org. Includes a placeholder UI with navigation buttons. Handles loading and empty states (directing back to Competitions).
-   : Profile screen, moved out of tabs and now accessible via . Simple placeholder.
-   : Contains placeholder image assets (, , , ) to resolve Expo warnings.
-   : Centralized API client. Exports  feature flag.
-   : UI theme definitions for glassmorphism, typography, and card styling.
-   : Reusable Glassmorphism card component, updated to use  and theme tokens, supports fixed height and top glow for rivalry.
-   : Avatar component in the header, configured to navigate to  on press.
-   : Component for displaying individual match details in lists, updated to show team logos from .
-   : General API client for frontend. Now uses  for actual data fetching and sorts sections.
-   : Helper for saving/getting the user's preferred competition ID using .
-   : Football-Data.org API client. Fetches competitions and matches with a demo data fallback if API key is missing or rate limited. Includes  for sorting by league strength.
-   : Defines the order of popular football leagues for sorting.
-   : Example environment variables for frontend, including .
-   : Updated with instructions for Football-Data.org API key setup and clean launch scripts.
</code_architecture>

<pending_tasks>
-   Successfully publish the Expo frontend to Expo.dev (EAS Update) to provide a stable link/QR for the user. This requires resolving the  error.
-   Integrate proper  wrappers within  and  (the placeholders) for absolute consistency, if not fully implemented in the final iteration.
</pending_tasks>

<current_work>
Immediately before this summary request, the AI engineer was attempting to publish the application to Expo.dev using EAS Update, specifically the  branch (which contains the Football-Data.org integration) to the  channel. The user had provided an  for authentication and requested a QR code and Expo.dev link.

However, the  command failed with an unknown or unexpected option: --token error, and subsequently, an account:login command failed. The user then asked how to continue the chat without losing data, prompting the AI engineer to escalate this to a support agent.

The  branch, which was to be published, includes:
-   **Football-Data.org Integration**: New modules (, , ) to fetch live football matches with a demo data fallback.
-   **Match Display**: The  screen is updated to use this new API, displaying today's matches for a preferred competition, and handling empty states. The  displays team logos.
-   **Competition Selection**:  fetches and sorts competitions, saving the user's choice.
-   **Environment**:  and  are set up for .  includes setup instructions.
-   **Assets**: Placeholder icons (, , ) were added to  to suppress Expo warnings.
-   **Routing & Layout**: The app's routing structure (, ) is stabilized, ensuring two tabs (Competitions, Matches), correct  behavior, and  navigation to Profile.
-   **Build & Lint**:  includes , , and various scripts, with a  GitHub Action for checks.
</current_work>

<optional_next_step>
Relay the support agent's response to the user regarding how to continue the chat without losing data.
</optional_next_step>
